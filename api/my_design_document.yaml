type: spec.insomnia.rest/5.0
name: My Design Document
meta:
  id: wrk_22509feb445a44b7889da483f9889a0c
  created: 1753180784844
  modified: 1753180784844
  description: ""
collection:
  - name: pet
    meta:
      id: fld_6b5fa24e8b7140bb8c87798692378504
      created: 1753185920468
      modified: 1753185920468
      sortKey: -1753185920468
      description: Everything about your Pets
    children:
      - url: "{{ _.base_url }}/pet"
        name: Update an existing pet.
        meta:
          id: req_34bc5fc36708454cb181d6d9e8164d07
          created: 1753185920486
          modified: 1753185920486
          isPrivate: false
          description: Update an existing pet by Id.
          sortKey: -1753185920486
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
              "id": 10,
              "name": "doggie",
              "category": {
                "id": 1,
                "name": "Dogs"
              },
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "string"
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet"
        name: Add a new pet to the store.
        meta:
          id: req_ed78f536a9514dabbc43fd644203aacc
          created: 1753185920499
          modified: 1753185920499
          isPrivate: false
          description: Add a new pet to the store.
          sortKey: -1753185920499
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "id": 10,
              "name": "doggie",
              "category": {
                "id": 1,
                "name": "Dogs"
              },
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "string"
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/findByStatus"
        name: Finds Pets by status.
        meta:
          id: req_e9e14976250d4ee29c2a6332ef3518ff
          created: 1753185920503
          modified: 1753185920503
          isPrivate: false
          description: Multiple status values can be provided with comma separated strings.
          sortKey: -1753185920503
        method: GET
        parameters:
          - name: status
            disabled: true
            value: available
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/findByTags"
        name: Finds Pets by tags.
        meta:
          id: req_d238f25e0cf54674a374b85086981bc8
          created: 1753185920507
          modified: 1753185920507
          isPrivate: false
          description: Multiple tags can be provided with comma separated strings. Use
            tag1, tag2, tag3 for testing.
          sortKey: -1753185920507
        method: GET
        parameters:
          - name: tags
            disabled: true
            value: string
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/{{ _.petId }}"
        name: Find pet by ID.
        meta:
          id: req_fe31afac26674054ba51c814fc24224f
          created: 1753185920510
          modified: 1753185920510
          isPrivate: false
          description: Returns a single pet.
          sortKey: -1753185920510
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/{{ _.petId }}"
        name: Updates a pet in the store with form data.
        meta:
          id: req_44ce642d3c3242da8a39a6283bfe9b92
          created: 1753185920514
          modified: 1753185920514
          isPrivate: false
          description: Updates a pet resource based on the form data.
          sortKey: -1753185920514
        method: POST
        parameters:
          - name: name
            disabled: true
            value: string
          - name: status
            disabled: true
            value: string
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/{{ _.petId }}"
        name: Deletes a pet.
        meta:
          id: req_e43ffdb0f30a400fb78db375218914d5
          created: 1753185920519
          modified: 1753185920519
          isPrivate: false
          description: Delete a pet.
          sortKey: -1753185920519
        method: DELETE
        headers:
          - name: api_key
            disabled: true
            value: string
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/{{ _.petId }}/uploadImage"
        name: Uploads an image.
        meta:
          id: req_d6ff95e3293c40739367d36a793e005c
          created: 1753185920522
          modified: 1753185920522
          isPrivate: false
          description: Upload image of the pet.
          sortKey: -1753185920522
        method: POST
        body:
          mimeType: application/octet-stream
        parameters:
          - name: additionalMetadata
            disabled: true
            value: string
        headers:
          - name: Content-Type
            disabled: false
            value: application/octet-stream
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: store
    meta:
      id: fld_67a7bdd2f3a0459e9cb81a973b3694f5
      created: 1753185920478
      modified: 1753185920478
      sortKey: -1753185920478
      description: Access to Petstore orders
    children:
      - url: "{{ _.base_url }}/store/inventory"
        name: Returns pet inventories by status.
        meta:
          id: req_5a7766822d4c4b6688fbc36b95aa7d6f
          created: 1753185920526
          modified: 1753185920526
          isPrivate: false
          description: Returns a map of status codes to quantities.
          sortKey: -1753185920526
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/store/order"
        name: Place an order for a pet.
        meta:
          id: req_21d1a74d81dc48d6b0a70a0c74c21b99
          created: 1753185920530
          modified: 1753185920530
          isPrivate: false
          description: Place a new order in the store.
          sortKey: -1753185920530
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "id": 10,
              "petId": 198772,
              "quantity": 7,
              "shipDate": "2025-07-22T12:05:20.436Z",
              "status": "approved",
              "complete": true
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/store/order/{{ _.orderId }}"
        name: Find purchase order by ID.
        meta:
          id: req_280e992cb80f4893ba7ea716f96fbe34
          created: 1753185920535
          modified: 1753185920535
          isPrivate: false
          description: For valid response try integer IDs with value <= 5 or > 10. Other
            values will generate exceptions.
          sortKey: -1753185920535
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/store/order/{{ _.orderId }}"
        name: Delete purchase order by identifier.
        meta:
          id: req_11b60b05716d45218c933c0c623d009e
          created: 1753185920538
          modified: 1753185920538
          isPrivate: false
          description: For valid response try integer IDs with value < 1000. Anything
            above 1000 or non-integers will generate API errors.
          sortKey: -1753185920538
        method: DELETE
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: user
    meta:
      id: fld_53df1930a0324e79942a9f93a86e8257
      created: 1753185920481
      modified: 1753185920481
      sortKey: -1753185920481
      description: Operations about user
    children:
      - url: "{{ _.base_url }}/user"
        name: Create user.
        meta:
          id: req_36dcd455ada94d06883df99a56399986
          created: 1753185920541
          modified: 1753185920541
          isPrivate: false
          description: This can only be done by the logged in user.
          sortKey: -1753185920541
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "id": 10,
              "username": "theUser",
              "firstName": "John",
              "lastName": "James",
              "email": "john@email.com",
              "password": "12345",
              "phone": "12345",
              "userStatus": 1
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/createWithList"
        name: Creates list of users with given input array.
        meta:
          id: req_f14e8887485d415c95a1e40199922b4c
          created: 1753185920545
          modified: 1753185920545
          isPrivate: false
          description: Creates list of users with given input array.
          sortKey: -1753185920545
        method: POST
        body:
          mimeType: application/json
          text: |-
            [
              {
                "id": 10,
                "username": "theUser",
                "firstName": "John",
                "lastName": "James",
                "email": "john@email.com",
                "password": "12345",
                "phone": "12345",
                "userStatus": 1
              }
            ]
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/login"
        name: Logs user into the system.
        meta:
          id: req_b718067a4e0040c4b9bb9ce8a865ab21
          created: 1753185920548
          modified: 1753185920548
          isPrivate: false
          description: Log into the system.
          sortKey: -1753185920548
        method: GET
        parameters:
          - name: username
            disabled: true
            value: string
          - name: password
            disabled: true
            value: string
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/logout"
        name: Logs out current logged in user session.
        meta:
          id: req_d8fa8a12e51e430b8250ba3d6bf8b77e
          created: 1753185920553
          modified: 1753185920553
          isPrivate: false
          description: Log user out of the system.
          sortKey: -1753185920553
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/{{ _.username }}"
        name: Get user by user name.
        meta:
          id: req_b4619214fc6c4ee7848deacda1b88179
          created: 1753185920557
          modified: 1753185920557
          isPrivate: false
          description: Get user detail based on username.
          sortKey: -1753185920557
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/{{ _.username }}"
        name: Update user resource.
        meta:
          id: req_a88405e4f1a445a2ba75ba790deaa4cd
          created: 1753185920560
          modified: 1753185920560
          isPrivate: false
          description: This can only be done by the logged in user.
          sortKey: -1753185920560
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
              "id": 10,
              "username": "theUser",
              "firstName": "John",
              "lastName": "James",
              "email": "john@email.com",
              "password": "12345",
              "phone": "12345",
              "userStatus": 1
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/{{ _.username }}"
        name: Delete user resource.
        meta:
          id: req_832c7bf830f04733b9d81a5ae993bc76
          created: 1753185920564
          modified: 1753185920564
          isPrivate: false
          description: This can only be done by the logged in user.
          sortKey: -1753185920564
        method: DELETE
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
cookieJar:
  name: Default Jar
  meta:
    id: jar_0dd2e17ca7fd9401e5d252f207c9f6653ff78a7c
    created: 1753180784978
    modified: 1753180784978
environments:
  name: Base Environment
  meta:
    id: env_0dd2e17ca7fd9401e5d252f207c9f6653ff78a7c
    created: 1753180784962
    modified: 1753185982546
    isPrivate: false
  data:
    "": ""
  subEnvironments:
    - name: OpenAPI env petstore3.swagger.io
      meta:
        id: env_41c1e4a85355499fb63c3934efe963bf
        created: 1753185920463
        modified: 1753185920463
        isPrivate: false
        sortKey: 1753185920463
      data:
        scheme: https
        base_path: /api/v3
        host: petstore3.swagger.io
spec:
  contents:
    openapi: 3.0.3
    info:
      title: Accounts API
      version: 1.0.0
      description: This API manages account information and balances.
      contact:
        email: example@test.com
    servers:
      - url: http://localhost:8081
        description: Local development server
    tags:
      - name: accounts
        description: Operations related to account management (retrieval and balance
          updates)
      - name: health
        description: Health check endpoints for monitoring service status
    paths:
      /health:
        get:
          tags:
            - health
          operationId: healthCheck
          summary: Health check endpoint
          description: Returns the API's health status
          responses:
            "200":
              description: API is healthy
              content:
                application/json:
                  schema:
                    type: string
                  examples:
                    success:
                      summary: Healthy response
                      value: Accounts API is running
        head:
          tags:
            - health
          operationId: healthCheckHead
          summary: Health check endpoint (HEAD)
          description: Returns the API's health status without body
          responses:
            "200":
              description: API is healthy
      /accounts:
        get:
          tags:
            - accounts
          operationId: listAccounts
          summary: List all accounts
          description: Returns a list of all accounts with basic details.
          responses:
            "200":
              description: A list of accounts was successfully retrieved
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Account"
                  examples:
                    multiple_accounts:
                      summary: Multiple accounts example
                      value:
                        - account_id: 123e4567-e89b-12d3-a456-426614174000
                          type: checking
                          balance: 1500
                        - account_id: 987fcdeb-51a2-43e7-89bc-765432198765
                          type: savings
                          balance: 5000
            "500":
              description: Failed to retrieve accounts due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    lock_error:
                      summary: Database lock error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Lock error: failed to acquire lock while listing accounts"
        post:
          tags:
            - accounts
          operationId: createAccount
          summary: Create a new account
          description: Creates a new account with an initial balance. The account ID is
            automatically generated.
          requestBody:
            description: Details for the new account including type and initial balance. The
              account ID will be automatically generated.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/CreateAccountRequest"
                examples:
                  checking_account:
                    summary: Create checking account
                    value:
                      type: checking
                      initial_balance: 1000
                  savings_account:
                    summary: Create savings account
                    value:
                      type: savings
                      initial_balance: 5000
          responses:
            "201":
              description: Account created successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    new_account:
                      summary: Newly created account
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 1000
            "400":
              description: Failed to create account due to invalid input
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    invalid_balance:
                      summary: Invalid initial balance
                      value:
                        error_code: INVALID_INPUT
                        message: "Failed to create account: Initial balance must be non-negative"
            "500":
              description: Failed to create account due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    creation_error:
                      summary: Account creation failed
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to create account: Internal server error occurred"
      /accounts/{accountId}:
        get:
          tags:
            - accounts
          operationId: getAccountById
          summary: Retrieve a single account
          description: Returns details for the specified account including current balance.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to retrieve
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          responses:
            "200":
              description: Account details retrieved successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    checking_account:
                      summary: Example checking account
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 1500
            "404":
              description: Account lookup failed - specified account ID does not exist
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found error
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to retrieve account: ID 123e4567-e89b-12d3-a456-426614174000
                          not found"
            "500":
              description: Failed to retrieve account details due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal server error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to retrieve account: Internal server error occurred"
      /accounts/{accountId}/debit:
        post:
          tags:
            - accounts
          operationId: debitAccount
          summary: Debit an account
          description: Decreases the account's balance by the specified amount.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to debit
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          requestBody:
            description: Specifies the amount to debit from the account balance.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UpdateBalanceRequest"
                examples:
                  small_debit:
                    summary: Small debit amount
                    value:
                      amount: 100
                  large_debit:
                    summary: Large debit amount
                    value:
                      amount: 1000
          responses:
            "200":
              description: Account debited successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    successful_debit:
                      summary: Account after successful debit
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 900
            "400":
              description: Debit operation failed due to insufficient funds or invalid amount
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    insufficient_funds:
                      summary: Insufficient funds error
                      value:
                        error_code: INSUFFICIENT_FUNDS
                        message: "Failed to debit account: Insufficient funds - balance is 900.00,
                          attempted to debit 1000.00"
            "404":
              description: Debit operation failed - account not found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to debit account: Account does not exist"
            "500":
              description: Failed to process debit operation due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to debit account: Internal server error occurred"
      /accounts/{accountId}/credit:
        post:
          tags:
            - accounts
          operationId: creditAccount
          summary: Credit an account
          description: Increases the account's balance by the specified amount.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to credit
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          requestBody:
            description: Specifies the amount to credit to the account balance.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UpdateBalanceRequest"
                examples:
                  small_credit:
                    summary: Small credit amount
                    value:
                      amount: 500
                  large_credit:
                    summary: Large credit amount
                    value:
                      amount: 5000
          responses:
            "200":
              description: Account credited successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    successful_credit:
                      summary: Account after successful credit
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 2000
            "400":
              description: Credit operation failed due to invalid amount
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    invalid_amount:
                      summary: Invalid amount error
                      value:
                        error_code: INVALID_INPUT
                        message: "Failed to credit account: Amount must be positive"
            "404":
              description: Credit operation failed - account not found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to credit account: Account does not exist"
            "500":
              description: Failed to process credit operation due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to credit account: Internal server error occurred"
    components:
      schemas:
        Account:
          type: object
          description: Represents a bank account with its core details including ID, type,
            and current balance.
          example:
            account_id: 123e4567-e89b-12d3-a456-426614174000
            type: checking
            balance: 1500
          properties:
            account_id:
              type: string
              format: uuid
              description: Unique identifier for the account (UUID v4)
              example: 123e4567-e89b-12d3-a456-426614174000
            type:
              type: string
              description: The type of the account (e.g., checking, savings)
              example: checking
            balance:
              type: number
              format: double
              description: The current balance of the account in the account's currency
              example: 1500
        CreateAccountRequest:
          type: object
          description: Request payload for creating a new account.
          example:
            type: savings
            initial_balance: 5000
          required:
            - type
            - initial_balance
          properties:
            type:
              type: string
              description: The type of account to create (e.g., checking, savings)
              example: savings
            initial_balance:
              type: number
              format: double
              description: The initial balance to fund the account with
              example: 5000
        UpdateBalanceRequest:
          type: object
          description: Request payload for updating an account's balance via credit or
            debit operations.
          example:
            amount: 100
          required:
            - amount
          properties:
            amount:
              type: number
              format: double
              description: The amount to credit or debit from the account
              example: 100
        ErrorResponse:
          type: object
          description: Standard error response structure for all error cases.
          example:
            error_code: NOT_FOUND
            message: The requested account does not exist.
          required:
            - error_code
            - message
          properties:
            error_code:
              type: string
              description: A standardized error code identifying the type of error
              example: NOT_FOUND
              enum:
                - INTERNAL_ERROR
                - NOT_FOUND
                - INSUFFICIENT_FUNDS
                - INVALID_INPUT
            message:
              type: string
              description: A human-readable description of the error
              example: The requested account does not exist.
  meta:
    id: spc_2b986d65a4c44b0d86f04f5456beb25d
    created: 1753180915269
    modified: 1753246722941
testSuites:
  - name: New Suite
    meta:
      id: uts_3600b61d6cab4172a4f9ac92521cd6b3
      created: 1753245985122
      modified: 1753245985122
      sortKey: -1753245985122
    tests:
      - name: Get Pet ID
        meta:
          id: ut_5aa172b4d4fc4e54895169685f96a883
          created: 1753245993395
          modified: 1753246176961
          sortKey: -1753245993395
        requestId: req_36dcd455ada94d06883df99a56399986
        code: |-
          const response1 = await insomnia.send();
          expect(response1.status).to.equal(200);
      - name: Returns 200
        meta:
          id: ut_af4c2827d37d42e9810ed481cf9e12d2
          created: 1753246164878
          modified: 1753246164878
          sortKey: -1753246164878
        code: |-
          const response1 = await insomnia.send();
          expect(response1.status).to.equal(200);
